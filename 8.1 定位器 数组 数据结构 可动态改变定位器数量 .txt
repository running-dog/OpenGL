//8.1  加入数据读取
//定位器按照规划点    move=放大倍数*Δx  精度提高 平滑移动   
//放大倍数*Δx   走位量是精确放大的  精度满足
//调整模型比例  视野，视见距离
//vector 数组动态插入
//采用数组 数据结构  可动态改变定位器数量



#include <glad/glad.h>        
#include <GLFW/glfw3.h>

#include <gl/glut.h>
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>

#include <learnopengl/filesystem.h>
#include <learnopengl/shader_m.h>
#include <learnopengl/camera.h>
#include <learnopengl/model.h>
#include<iomanip>
#include <iostream>
#include <vector>
#include<string>
void framebuffer_size_callback(GLFWwindow* window, int width, int height);
void mouse_callback(GLFWwindow* window, double xpos, double ypos);
void scroll_callback(GLFWwindow* window, double xoffset, double yoffset);
void processInput(GLFWwindow *window);
void key_callback(GLFWwindow* window, int key, int scancode, int action, int mode);

void jude_viewlock();
void  jude_direction_change();
void do_movement_slider();
void read_data_of_txt();

//------------------------------------       camera自定义
//void mouse_callback(GLFWwindow* window, double xpos, double ypos);
float yaw = -90.0f;
float pitch = 0.0f;

glm::vec3 cameraPos = glm::vec3(600.0f,600.0f,600.0f);  //摄像机位置
glm::vec3 cameraFront = glm::vec3(150.0f, 0.0f, 150.0f) - cameraPos;//摄像机视线方向
glm::vec3 cameraUp = glm::vec3(0.0f, 1.0f, 0.0f);
float viewlocker = 0.0f;

glm::vec3 cameraFront_now = cameraFront;

//glm::mat4 view = view = glm::lookAt(cameraPos, cameraPos + cameraFront, cameraUp);
//------------------------------------



// settings    设置窗口宽高
const unsigned int SCR_WIDTH = 1000;
const unsigned int SCR_HEIGHT = 800;

// camera         
Camera camera(glm::vec3(0.0, 0.0, 20.0));
float lastX = SCR_WIDTH / 2.0;
float lastY = SCR_HEIGHT / 2.0;
float fov = 45.0;
//float lastX = SCR_WIDTH;
//float lastY = SCR_HEIGHT;
bool firstMouse = true;

// timing
float deltaTime = 0.0;
float lastFrame = 0.0;

bool keys[1024];
float  angle = 0.0;
GLfloat movespeed = 0.3;   //设置的移动速度
GLfloat velocity;
float scale_proportion = 3.0; //模型大小设置的缩放比例
float smooth_steps = 1/1.0;  //平滑的步数
float arrive_interval = 0.01;
double magnify_slidermove = 0.12;  //定位器移动量的放大倍数

struct Point {
	double  x;
	double  y;
	double  z;
};
int lines_txt;    //txt文件中的数据行数   传入文件时需要手动输入
Point trans_point[4*10000];

//Point trans_point[4*lines_txt] = {
//
//	{ 0.000 ,0.000 ,0.000},
//	{ 11643.297, - 1014.215, - 1978.430 },
//	{ 13168.580 ,- 1014.793 ,- 1911.760 },
//	{ 0.000 ,0.000 ,0.000 },
//
//	{ 0.5, 0.000, 0.000 },
//	{ 11643.297, - 1014.215, - 1978.430 },
//	{ 13168.580, - 1014.793, - 1911.760 },
//	{ 0.001,0.0, 0.0 }
//};

const int device_numbers=4;
double 	arrive_group_copy[device_numbers][3];
double 	arrive_group[device_numbers][3];
int row_transpoint = 0;   
int i=0;
int length;//length 为传过来的点的个数
bool  focus_change = false;
		   
//------------------------
glm::vec3 model_pos_base[6] = {
      glm::vec3(0.0, 0.0, 0.0) ,
      glm::vec3(300.0, 0.0, 0.0),
	  glm::vec3(0.0, 0.0, 300.0),
	  glm::vec3(300.0, 0.0,300.0),
	  glm::vec3(150.0, 0.0,-100.0)
};

glm::vec3 model_pos_X[6] = {
	glm::vec3(0.0, 0.0, 0.0) ,
	glm::vec3(300.0, 0.0, 0.0),
	glm::vec3(0.0, 0.0, 300.0),
	glm::vec3(300.0, 0.0,300.0),
	glm::vec3(150.0, 0.0,-100.0)
};

glm::vec3 model_pos_Y[6] = {
	glm::vec3(0.0, 0.0, 0.0) ,
	glm::vec3(300.0, 0.0, 0.0),
	glm::vec3(0.0, 0.0, 300.0),
	glm::vec3(300.0, 0.0,300.0),
	glm::vec3(150.0, 0.0,-100.0)
};
glm::vec3 model_pos_Z[6] = {  //竖直方向运动的模型
	glm::vec3(0.0, 0.0, 0.0) ,
	glm::vec3(300.0, 0.0, 0.0),
	glm::vec3(0.0, 0.0, 300.0),
	glm::vec3(300.0, 0.0,300.0),
	glm::vec3(150.0, 0.0,-100.0)
};


////1-4号定位器 初始位置向量 --->注意现实坐标系和 仿真空间坐标系之间的 **映射**
//glm::vec3 model_pos = glm::vec3(0.0, 0.0, 0.0); //定位器底座
//glm::vec3 model_pos_1 = glm::vec3(0.0, 0.0, 0.0);//X_1     
//glm::vec3 model_pos_2 = glm::vec3(0.0, 0.0, 0.0);//Y_1   -->正常世界的空间坐标系的三个 方向
//glm::vec3 model_pos_3 = glm::vec3(0.0, 0.0, 0.0);//Z_1


double slider_x_dir_value_change[device_numbers];
double slider_y_dir_value_change[device_numbers];
double slider_z_dir_value_change[device_numbers];


//定位器各方向运动是否到达指定位置 判断标志

bool all_arrive_x = false;
bool all_arrive_z = false;
bool all_arrive_y = false;
bool all_arrive_one_point = false;
bool have_one_loop = false;
int steps_slider = 0;




int main()
{



	// glfw: initialize and configure
	// ------------------------------
	glfwInit();
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

#ifdef __APPLE__
	glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE); // uncomment this statement to fix compilation on OS X
#endif

														 // glfw window creation
														 // --------------------
	GLFWwindow* window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, "LearnOpenGL", NULL, NULL);
	if (window == NULL)
	{
		std::cout << "Failed to create GLFW window" << std::endl;
		glfwTerminate();
		return -1;
	}
	glfwMakeContextCurrent(window);
	glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);
	//-------------------------------


	glfwSetCursorPosCallback(window, mouse_callback);


	//----------------------------


	glfwSetScrollCallback(window, scroll_callback);

	// tell GLFW to capture our mouse
	glfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_DISABLED);

	//键盘捕捉
	glfwSetKeyCallback(window, key_callback);

	// glad: load all OpenGL function pointers
	// ---------------------------------------
	if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))
	{
		std::cout << "Failed to initialize GLAD" << std::endl;
		return -1;
	}

	// configure global opengl state
	// -----------------------------
	glEnable(GL_DEPTH_TEST);

	// build and compile shaders
	// -------------------------
	Shader ourShader("1.model_loading.vs", "1.model_loading.fs");

	// load models
	// ------------------------------------------
	vector<Model> SliderModels_base;
	for (int i = 0; i<device_numbers;i++ )
	{
		Model ourModel("D:/5-VScode/test_16/resources/objects/dingweiqi/dizuo.obj");
		SliderModels_base.push_back(ourModel);
	}
	vector<Model> SliderModels_X;
	for (int i = 0; i<device_numbers; i++)
	{
		Model ourModel("D:/5-VScode/test_16/resources/objects/dingweiqi/x_1.obj");
		SliderModels_X.push_back(ourModel);
	}
	vector<Model> SliderModels_Y;
	for (int i = 0; i<device_numbers; i++)
	{
		Model ourModel("D:/5-VScode/test_16/resources/objects/dingweiqi/y_1.obj");
		SliderModels_Y.push_back(ourModel);
	}
	vector<Model> SliderModels_Z; //竖直方向运动的模型
	for (int i = 0; i<device_numbers; i++)
	{
		Model ourModel("D:/5-VScode/test_16/resources/objects/dingweiqi/z_1.obj");
		SliderModels_Z.push_back(ourModel);
	}
	
	// draw in wireframe
	//glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);


	//----------------------------------------------------------------
	//第一次走位之前 （进入循环之前）装入目标位置点 
	//arrive_1 = glm::vec3(trans_point[raw_slider_1].x, trans_point[raw_slider_1].y, trans_point[raw_slider_1].z);
	//arrive_2 = glm::vec3(trans_point[raw_slider_2].x, trans_point[raw_slider_2].y, trans_point[raw_slider_2].z);
	//arrive_3 = glm::vec3(trans_point[raw_slider_3].x, trans_point[raw_slider_3].y, trans_point[raw_slider_3].z);
	//arrive_4 = glm::vec3(trans_point[raw_slider_4].x, trans_point[raw_slider_4].y, trans_point[raw_slider_4].z);

	//arrive_1_copy = model_pos_3;  //arrivecopy 装入起始位置点
	//arrive_2_copy = model_pos_7;
	//arrive_3_copy = model_pos_11;
	//arrive_4_copy = model_pos_15;

	//-----------------------------------------------------------------------------
	read_data_of_txt();//读取txt数据装入 结构体数组中

	length = 4*lines_txt;//计算传过来的点的个数
	//Point结构体中变量类型  float 3*4   double  3*4*2   //改变结构体变量类型记得回来改这里

	//------------------------------------------------------------------------------
	//注意现实坐标系和 仿真空间坐标系之间的 **映射**

	for ( i = 0, row_transpoint = 0; i < device_numbers; i++, row_transpoint++)
	{
		arrive_group_copy[i][0] = trans_point[row_transpoint].x; arrive_group_copy[i][1] = trans_point[row_transpoint].y;
		arrive_group_copy[i][2] = trans_point[row_transpoint].z;  //1-4号定位器 目标点
	}


	//[][0] [][1]  水平方向  [][2]竖直方向   arrive_group,arrive_group_copy 
	for ( i = 0, row_transpoint= device_numbers; i < device_numbers; i++, row_transpoint++)
	{
		arrive_group[i][0] = trans_point[row_transpoint].x; arrive_group[i][1] = trans_point[row_transpoint].y;
		arrive_group[i][2] = trans_point[row_transpoint].z;  //1-4号定位器 目标点
	}







	//--------------------------------------------------------------------
	//******计算各个定位器三个轴的移动方向****
	//jude_direction();//计算第一组位置轴的移动方向

	jude_direction_change();

   // render loop  //循环开始
   // -----------
	while (!glfwWindowShouldClose(window))
	{
		// per-frame time logic
		// --------------------
		float currentFrame = glfwGetTime();
		deltaTime = currentFrame - lastFrame;
		lastFrame = currentFrame;

		velocity = movespeed * deltaTime;


		// render
		// ------
		glClearColor(0.3f, 0.5f, 1.0f, 1.0f);
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

		// don't forget to enable shader before setting uniforms
		ourShader.use();

		//
		//给定光照
		ourShader.setVec3("viewPos", camera.Position);
		ourShader.setFloat("shininess", 64.0f);
		ourShader.setVec3("light.position", glm::vec3(0.0f, 5.0f, 0.0f));
		ourShader.setVec3("light.ambient", 0.5f, 0.5f, 0.5f);
		ourShader.setVec3("light.diffuse", 0.8f, 0.8f, 0.8f);
		ourShader.setVec3("light.specular", 1.0f, 1.0f, 1.0f);
		ourShader.setFloat("light.constant", 1.0f);
		ourShader.setFloat("light.linear", 0.045f);
		ourShader.setFloat("light.quadratic", 0.0075f);

		GLfloat sun_light_position[] = { 10.0f, 10.0f, 10.0f, 1.0f }; //光源的位置在世界坐标系圆心，齐次坐标形式
		GLfloat sun_light_ambient[] = { 1.0f, 1.0f, 1.0f, 1.0f }; //RGBA模式的环境光，为0
		GLfloat sun_light_diffuse[] = { 1.0f, 1.0f, 1.0f, 1.0f }; //RGBA模式的漫反射光，全白光
		GLfloat sun_light_specular[] = { 1.0f, 1.0f, 1.0f, 1.0f };  //RGBA模式下的镜面光 ，全白光
		glLightfv(GL_LIGHT0, GL_POSITION, sun_light_position);
		glLightfv(GL_LIGHT0, GL_AMBIENT, sun_light_ambient);
		glLightfv(GL_LIGHT0, GL_DIFFUSE, sun_light_diffuse);
		glLightfv(GL_LIGHT0, GL_SPECULAR, sun_light_specular);

		//开启灯光
		glEnable(GL_LIGHT0);
		glEnable(GL_LIGHTING);
		glEnable(GL_DEPTH_TEST);

		

		//视角锁定
		jude_viewlock();


        //视野  视见距离
		glm::mat4 projection = glm::perspective(glm::radians(45.0f), (float)SCR_WIDTH / (float)SCR_HEIGHT, 1.0f,10000.0f);
		glm::mat4 view = glm::lookAt(cameraPos, cameraPos + cameraFront, cameraUp);
		ourShader.setMat4("projection", projection);
		ourShader.setMat4("view", view);//view 观察矩阵

		// render the loaded model
		//---------------------------------------------------------------------
		if (have_one_loop)   //have_one_loop==true 则更新下一组 要达到的点
		{
			if (row_transpoint< length - 1)//如果不是最后一组位置点-->接着更新位置点组
			{   
				for (int i = 0; i < device_numbers; i++)
				{
					arrive_group_copy[i][0] = arrive_group[i][0]; arrive_group_copy[i][1] = arrive_group[i][1];
					arrive_group_copy[i][2] = arrive_group[i][2];
				}

				//[][0] [][1]  水平方向  [][2]竖直方向   arrive_group,arrive_group_copy 
				for (i = 0; i < device_numbers; i++, row_transpoint++)
				{
					arrive_group[i][0] = trans_point[row_transpoint].x; arrive_group[i][1] = trans_point[row_transpoint].y;
					arrive_group[i][2] = trans_point[row_transpoint].z;  //1-4号定位器 目标点
				}

				jude_direction_change();//重新确定方向

				all_arrive_x = false;
				all_arrive_z = false; 
				all_arrive_y = false;
				have_one_loop = false;  //重新置位到达状态

			}
			else
			{
				all_arrive_x =true;
				all_arrive_z = true;
				all_arrive_y = true;
				have_one_loop = true;  //重新置位到达状态
			}


		}


		//定位器运送物体到指定点
		if (!have_one_loop)
		{
			do_movement_slider();

			if (all_arrive_x && all_arrive_z && all_arrive_y)
			{
				have_one_loop = true;
			}
		}


		//---------------------------

		for (int i = 0; i < device_numbers; i++)
		{
			glm::mat4 model = glm::mat4(1.0);
			model = glm::translate(model, model_pos_base[i]); //定义模型每个循环出现的位置
			model = glm::scale(model, glm::vec3(scale_proportion, scale_proportion, scale_proportion));	// it's a bit too big for our scene, so scale it down
			ourShader.setMat4("model", model);
			SliderModels_base[i].Draw(ourShader);

		}

		for (int i = 0; i <device_numbers; i++)
		{
			glm::mat4 model = glm::mat4(1.0);
			model = glm::translate(model, model_pos_X[i]); //定义模型每个循环出现的位置
			model = glm::scale(model, glm::vec3(scale_proportion, scale_proportion, scale_proportion));	// it's a bit too big for our scene, so scale it down
			ourShader.setMat4("model", model);
			SliderModels_X[i].Draw(ourShader);

		}

		for (int i = 0; i < device_numbers; i++)
		{
			glm::mat4 model = glm::mat4(1.0);
			model = glm::translate(model, model_pos_Y[i]); //定义模型每个循环出现的位置
			model = glm::scale(model, glm::vec3(scale_proportion, scale_proportion, scale_proportion));	// it's a bit too big for our scene, so scale it down
			ourShader.setMat4("model", model);
			SliderModels_Y[i].Draw(ourShader);

		}

		for (int i = 0; i <device_numbers; i++)
		{
			glm::mat4 model = glm::mat4(1.0);
			model = glm::translate(model, model_pos_Z[i]); //定义模型每个循环出现的位置
			model = glm::scale(model, glm::vec3(scale_proportion, scale_proportion, scale_proportion));	// it's a bit too big for our scene, so scale it down
			ourShader.setMat4("model", model);
			SliderModels_Z[i].Draw(ourShader);

		}

		

		//--------------------------------------------------------------------------------------------------------------------
		if (keys[GLFW_KEY_G])
			focus_change = true;
		if(keys[GLFW_KEY_H])
			focus_change = false;

		if (focus_change)
		{
			 cameraFront = glm::vec3(300.0f, 0.0f, 300.0f) - cameraPos;//摄像机视线方向
		}
		if (!focus_change)
		{
		  cameraFront = glm::vec3(150.0f, 0.0f, 150.0f) - cameraPos;//摄像机视线方向
		}




		// 按键input
		// -----------------------------------------------------------------------
		processInput(window);

		// glfw: swap buffers and poll IO events (keys pressed/released, mouse moved etc.)
		// -------------------------------------------------------------------------------
		glfwSwapBuffers(window);
		glfwPollEvents();
	}

	// glfw: terminate, clearing all previously allocated GLFW resources.
	// ------------------------------------------------------------------
	glfwTerminate();
	return 0;
}

// process all input: query GLFW whether relevant keys are pressed/released this frame and react accordingly
// ---------------------------------------------------------------------------------------------------------



void do_movement_slider()
{


	if (!all_arrive_x) //走x方向
	{
		for (int i = 0; i < device_numbers; i++)
		{
			model_pos_X[i].x += smooth_steps*slider_x_dir_value_change[i];
			model_pos_Y[i].x += smooth_steps*slider_x_dir_value_change[i];
			model_pos_Z[i].x += smooth_steps*slider_x_dir_value_change[i];
			steps_slider++;
		}


		if (steps_slider >= 1 / smooth_steps)
		{
			steps_slider = 0;
			all_arrive_x = true;

		}
	}


	if (!all_arrive_z) //走z方向
	{
		for (int i = 0; i < device_numbers; i++)
		{
			model_pos_Y[i].z += smooth_steps*slider_z_dir_value_change[i];
			model_pos_Z[i].z += smooth_steps*slider_z_dir_value_change[i];
			steps_slider++;
		}


		if (steps_slider >= 1 / smooth_steps)
		{
			steps_slider = 0;
			all_arrive_z = true;
		}
	}


	if (!all_arrive_y) //走y方向
	{
		for (int i = 0; i < device_numbers; i++)
		{
			model_pos_Z[i].y += smooth_steps*slider_y_dir_value_change[i];
			steps_slider++;
		}


		if (steps_slider >= 1 / smooth_steps)
		{
			steps_slider = 0;
			all_arrive_y = true;

		}
	}

	if (all_arrive_x && all_arrive_z && all_arrive_y)
	{
		have_one_loop = true;
		steps_slider = 0;
	}

}


void  jude_direction_change()
{
	//注意现实坐标系和 仿真空间坐标系之间的 映射
	for (int i = 0; i < device_numbers; i++)
	{
		slider_x_dir_value_change[i] = magnify_slidermove*(arrive_group[i][0] - arrive_group_copy[i][0]);
		slider_z_dir_value_change[i] = magnify_slidermove*(arrive_group[i][1] - arrive_group_copy[i][1]);
		slider_y_dir_value_change[i] = magnify_slidermove*(arrive_group[i][2] - arrive_group_copy[i][2]);
	}


}


void read_data_of_txt()
{
	unsigned int i = 0, j = 0;
	double a;
	vector<double> myvec;
	ifstream fin("D:/5-VScode/test_15/data_AGV_2.txt");

	//C++ eof()函数返回true时是读文件结束符0xFF,因此，当读到最后一个字符时，程序会多读一次（编译器会让指针停留在最后一                  个字符那里，然后重复读取一次，这也就是就上面最后一个字符会输出两次的原因。
	while (!fin.eof())
	{
		fin >> a;
		myvec.push_back(a);
	}

	lines_txt = myvec.size() / (3 * device_numbers + 1);

	for (i = 0, j = 0; i< myvec.size() - 1; i += (3 * device_numbers + 1), j++)
	{
		{
			for (int k = 0; k < device_numbers; k++)
			{
				trans_point[device_numbers * j + k] = { myvec[i +1+ 3*k],myvec[i + 2+ 3 * k],myvec[i + 3+ 3 * k] };
			}
			//trans_point[4 * j + 0] = { myvec[i + 1],myvec[i + 2],myvec[i + 3] };
			//trans_point[4 * j + 1] = { myvec[i + 4],myvec[i + 5],myvec[i + 6] };
			//trans_point[4 * j + 2] = { myvec[i + 7],myvec[i + 8],myvec[i + 9] };
			//trans_point[4 * j + 3] = { myvec[i + 10],myvec[i + 11],myvec[i + 12] };
		}

	}
	myvec.clear();

	fin.close();
}



void processInput(GLFWwindow* window)
{
	//float  angle = 0.0f;

	glm::vec3 front = glm::vec3(0.0f, 0.0f, -1.0f);
	float cameraSpeed = 2.5f * deltaTime;
	//float cameraSpeed = 0.05f; // adjust accordingly
	if (glfwGetKey(window, GLFW_KEY_UP) == GLFW_PRESS)
		cameraPos += cameraSpeed * cameraFront;
	if (glfwGetKey(window, GLFW_KEY_DOWN) == GLFW_PRESS)
		cameraPos -= cameraSpeed * cameraFront;
	if (glfwGetKey(window, GLFW_KEY_RIGHT) == GLFW_PRESS)
		cameraPos -= glm::normalize(glm::cross(cameraFront, cameraUp)) * cameraSpeed;
	if (glfwGetKey(window, GLFW_KEY_LEFT) == GLFW_PRESS)
		cameraPos += glm::normalize(glm::cross(cameraFront, cameraUp)) * cameraSpeed;

	if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
		glfwSetWindowShouldClose(window, true);
}






// glfw: whenever the window size changed (by OS or user resize) this callback function executes
// ---------------------------------------------------------------------------------------------
void framebuffer_size_callback(GLFWwindow* window, int width, int height)
{
	// make sure the viewport matches the new window dimensions; note that width and 
	// height will be significantly larger than specified on retina displays.
	glViewport(0, 0, width, height);
}



// glfw: whenever the mouse scroll wheel scrolls, this callback is called
// ----------------------------------------------------------------------
void scroll_callback(GLFWwindow* window, double xoffset, double yoffset)
{
	if (fov >= 1.0f && fov <= 50.0f)
		fov -= yoffset;
	if (fov <= 1.0f)
		fov = 1.0f;
	if (fov >= 50.0f)
		fov =50.0f;
}

void key_callback(GLFWwindow* window, int key, int scancode, int action, int mode)
{
	if (key == GLFW_KEY_ESCAPE && action == GLFW_PRESS)
		glfwSetWindowShouldClose(window, GL_TRUE);
	if (key >= 0 && key < 1024)
	{
		//设置按下/释放键为true或false
		if (action == GLFW_PRESS)
			keys[key] = true;
		else if (action == GLFW_RELEASE)
			keys[key] = false;
	}

}

// glfw: whenever the mouse moves, this callback is called
// -------------------------------------------------------
void mouse_callback(GLFWwindow* window, double xpos, double ypos)
{


	if (firstMouse)
	{
		lastX = xpos;
		lastY = ypos;
		firstMouse = false;
	}

	float xoffset = xpos - lastX;
	float yoffset = lastY - ypos;
	lastX = xpos;
	lastY = ypos;

	float sensitivity = 0.1;
	xoffset *= sensitivity;
	yoffset *= sensitivity;

	yaw += xoffset;
	pitch += yoffset;

	if (pitch > 89.0f)
		pitch = 89.0f;
	if (pitch < -89.0f)
		pitch = -89.0f;

	glm::vec3 front;
	front.x = cos(glm::radians(yaw)) * cos(glm::radians(pitch));
	front.y = sin(glm::radians(pitch));
	front.z = sin(glm::radians(yaw)) * cos(glm::radians(pitch));

	//--------------------------------------------
	//视角锁定 Version1.0
	if (viewlocker == 1.0)
	{
		cameraFront = glm::normalize(front);
		cameraFront_now = cameraFront;
	}
	if (viewlocker == 0.0)
	{
		cameraFront = cameraFront_now;//摄像机视线方向
									  //cameraUp = glm::vec3(0.0f, 1.0f, 0.0f);
	}

}

void jude_viewlock()
{
	if (keys[GLFW_KEY_X])//X 视角解锁
	{
		viewlocker = 1.0;
	}
	if (keys[GLFW_KEY_C])//C  视角锁定
	{
		viewlocker = 0.0;
	}
}




